/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables;


import java.util.Collection;

import org.acumen.training.codes.model.Keys;
import org.acumen.training.codes.model.Public;
import org.acumen.training.codes.model.tables.Reservation.ReservationPath;
import org.acumen.training.codes.model.tables.records.BoatRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Boat extends TableImpl<BoatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.boat</code>
     */
    public static final Boat BOAT = new Boat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoatRecord> getRecordType() {
        return BoatRecord.class;
    }

    /**
     * The column <code>public.boat.id</code>.
     */
    public final TableField<BoatRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.boat.name</code>.
     */
    public final TableField<BoatRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.boat.colour</code>.
     */
    public final TableField<BoatRecord, String> COLOUR = createField(DSL.name("colour"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    private Boat(Name alias, Table<BoatRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Boat(Name alias, Table<BoatRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.boat</code> table reference
     */
    public Boat(String alias) {
        this(DSL.name(alias), BOAT);
    }

    /**
     * Create an aliased <code>public.boat</code> table reference
     */
    public Boat(Name alias) {
        this(alias, BOAT);
    }

    /**
     * Create a <code>public.boat</code> table reference
     */
    public Boat() {
        this(DSL.name("boat"), null);
    }

    public <O extends Record> Boat(Table<O> path, ForeignKey<O, BoatRecord> childPath, InverseForeignKey<O, BoatRecord> parentPath) {
        super(path, childPath, parentPath, BOAT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BoatPath extends Boat implements Path<BoatRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BoatPath(Table<O> path, ForeignKey<O, BoatRecord> childPath, InverseForeignKey<O, BoatRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BoatPath(Name alias, Table<BoatRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BoatPath as(String alias) {
            return new BoatPath(DSL.name(alias), this);
        }

        @Override
        public BoatPath as(Name alias) {
            return new BoatPath(alias, this);
        }

        @Override
        public BoatPath as(Table<?> alias) {
            return new BoatPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BoatRecord> getPrimaryKey() {
        return Keys.BOAT_PKEY;
    }

    private transient ReservationPath _reservation;

    /**
     * Get the implicit to-many join path to the <code>public.reservation</code>
     * table
     */
    public ReservationPath reservation() {
        if (_reservation == null)
            _reservation = new ReservationPath(this, null, Keys.RESERVATION__RESERVATION_BID_FKEY.getInverseKey());

        return _reservation;
    }

    @Override
    public Boat as(String alias) {
        return new Boat(DSL.name(alias), this);
    }

    @Override
    public Boat as(Name alias) {
        return new Boat(alias, this);
    }

    @Override
    public Boat as(Table<?> alias) {
        return new Boat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Boat rename(String name) {
        return new Boat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Boat rename(Name name) {
        return new Boat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Boat rename(Table<?> name) {
        return new Boat(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Boat where(Condition condition) {
        return new Boat(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Boat where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Boat where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Boat where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Boat where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Boat where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Boat where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Boat where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Boat whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Boat whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
