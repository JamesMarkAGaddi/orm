/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables.records;


import org.acumen.training.codes.model.tables.Sailor;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SailorRecord extends UpdatableRecordImpl<SailorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.sailor.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.sailor.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.sailor.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.sailor.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.sailor.rating</code>.
     */
    public void setRating(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.sailor.rating</code>.
     */
    public Integer getRating() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.sailor.age</code>.
     */
    public void setAge(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.sailor.age</code>.
     */
    public Integer getAge() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SailorRecord
     */
    public SailorRecord() {
        super(Sailor.SAILOR);
    }

    /**
     * Create a detached, initialised SailorRecord
     */
    public SailorRecord(Integer id, String name, Integer rating, Integer age) {
        super(Sailor.SAILOR);

        setId(id);
        setName(name);
        setRating(rating);
        setAge(age);
        resetChangedOnNotNull();
    }
}
