/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables;


import java.util.Collection;

import org.acumen.training.codes.model.Keys;
import org.acumen.training.codes.model.Public;
import org.acumen.training.codes.model.tables.Reservation.ReservationPath;
import org.acumen.training.codes.model.tables.records.SailorRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Sailor extends TableImpl<SailorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sailor</code>
     */
    public static final Sailor SAILOR = new Sailor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SailorRecord> getRecordType() {
        return SailorRecord.class;
    }

    /**
     * The column <code>public.sailor.id</code>.
     */
    public final TableField<SailorRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.sailor.name</code>.
     */
    public final TableField<SailorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.sailor.rating</code>.
     */
    public final TableField<SailorRecord, Integer> RATING = createField(DSL.name("rating"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.sailor.age</code>.
     */
    public final TableField<SailorRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER.nullable(false), this, "");

    private Sailor(Name alias, Table<SailorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Sailor(Name alias, Table<SailorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.sailor</code> table reference
     */
    public Sailor(String alias) {
        this(DSL.name(alias), SAILOR);
    }

    /**
     * Create an aliased <code>public.sailor</code> table reference
     */
    public Sailor(Name alias) {
        this(alias, SAILOR);
    }

    /**
     * Create a <code>public.sailor</code> table reference
     */
    public Sailor() {
        this(DSL.name("sailor"), null);
    }

    public <O extends Record> Sailor(Table<O> path, ForeignKey<O, SailorRecord> childPath, InverseForeignKey<O, SailorRecord> parentPath) {
        super(path, childPath, parentPath, SAILOR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SailorPath extends Sailor implements Path<SailorRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SailorPath(Table<O> path, ForeignKey<O, SailorRecord> childPath, InverseForeignKey<O, SailorRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SailorPath(Name alias, Table<SailorRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SailorPath as(String alias) {
            return new SailorPath(DSL.name(alias), this);
        }

        @Override
        public SailorPath as(Name alias) {
            return new SailorPath(alias, this);
        }

        @Override
        public SailorPath as(Table<?> alias) {
            return new SailorPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SailorRecord> getPrimaryKey() {
        return Keys.SAILOR_PKEY;
    }

    private transient ReservationPath _reservation;

    /**
     * Get the implicit to-many join path to the <code>public.reservation</code>
     * table
     */
    public ReservationPath reservation() {
        if (_reservation == null)
            _reservation = new ReservationPath(this, null, Keys.RESERVATION__RESERVATION_SID_FKEY.getInverseKey());

        return _reservation;
    }

    @Override
    public Sailor as(String alias) {
        return new Sailor(DSL.name(alias), this);
    }

    @Override
    public Sailor as(Name alias) {
        return new Sailor(alias, this);
    }

    @Override
    public Sailor as(Table<?> alias) {
        return new Sailor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sailor rename(String name) {
        return new Sailor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sailor rename(Name name) {
        return new Sailor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sailor rename(Table<?> name) {
        return new Sailor(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sailor where(Condition condition) {
        return new Sailor(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sailor where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sailor where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sailor where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sailor where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sailor where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sailor where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sailor where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sailor whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sailor whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
