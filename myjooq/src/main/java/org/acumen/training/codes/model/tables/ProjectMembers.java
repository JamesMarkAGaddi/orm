/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.acumen.training.codes.model.Keys;
import org.acumen.training.codes.model.Public;
import org.acumen.training.codes.model.tables.Project.ProjectPath;
import org.acumen.training.codes.model.tables.records.ProjectMembersRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProjectMembers extends TableImpl<ProjectMembersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.project_members</code>
     */
    public static final ProjectMembers PROJECT_MEMBERS = new ProjectMembers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectMembersRecord> getRecordType() {
        return ProjectMembersRecord.class;
    }

    /**
     * The column <code>public.project_members.id</code>.
     */
    public final TableField<ProjectMembersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.project_members.firstname</code>.
     */
    public final TableField<ProjectMembersRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>public.project_members.lastname</code>.
     */
    public final TableField<ProjectMembersRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>public.project_members.projid</code>.
     */
    public final TableField<ProjectMembersRecord, Integer> PROJID = createField(DSL.name("projid"), SQLDataType.INTEGER, this, "");

    private ProjectMembers(Name alias, Table<ProjectMembersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProjectMembers(Name alias, Table<ProjectMembersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.project_members</code> table reference
     */
    public ProjectMembers(String alias) {
        this(DSL.name(alias), PROJECT_MEMBERS);
    }

    /**
     * Create an aliased <code>public.project_members</code> table reference
     */
    public ProjectMembers(Name alias) {
        this(alias, PROJECT_MEMBERS);
    }

    /**
     * Create a <code>public.project_members</code> table reference
     */
    public ProjectMembers() {
        this(DSL.name("project_members"), null);
    }

    public <O extends Record> ProjectMembers(Table<O> path, ForeignKey<O, ProjectMembersRecord> childPath, InverseForeignKey<O, ProjectMembersRecord> parentPath) {
        super(path, childPath, parentPath, PROJECT_MEMBERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProjectMembersPath extends ProjectMembers implements Path<ProjectMembersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProjectMembersPath(Table<O> path, ForeignKey<O, ProjectMembersRecord> childPath, InverseForeignKey<O, ProjectMembersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProjectMembersPath(Name alias, Table<ProjectMembersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProjectMembersPath as(String alias) {
            return new ProjectMembersPath(DSL.name(alias), this);
        }

        @Override
        public ProjectMembersPath as(Name alias) {
            return new ProjectMembersPath(alias, this);
        }

        @Override
        public ProjectMembersPath as(Table<?> alias) {
            return new ProjectMembersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProjectMembersRecord> getPrimaryKey() {
        return Keys.PROJECT_MEMBERS_PKEY;
    }

    @Override
    public List<ForeignKey<ProjectMembersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROJECT_MEMBERS__PROJECT_MEMBERS_PROJID_FKEY);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.project</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.PROJECT_MEMBERS__PROJECT_MEMBERS_PROJID_FKEY, null);

        return _project;
    }

    @Override
    public ProjectMembers as(String alias) {
        return new ProjectMembers(DSL.name(alias), this);
    }

    @Override
    public ProjectMembers as(Name alias) {
        return new ProjectMembers(alias, this);
    }

    @Override
    public ProjectMembers as(Table<?> alias) {
        return new ProjectMembers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectMembers rename(String name) {
        return new ProjectMembers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectMembers rename(Name name) {
        return new ProjectMembers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectMembers rename(Table<?> name) {
        return new ProjectMembers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMembers where(Condition condition) {
        return new ProjectMembers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMembers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMembers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMembers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectMembers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectMembers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectMembers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectMembers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMembers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectMembers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
