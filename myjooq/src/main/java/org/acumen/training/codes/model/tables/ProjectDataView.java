/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables;


import java.time.LocalDate;
import java.util.Collection;

import org.acumen.training.codes.model.Public;
import org.acumen.training.codes.model.tables.records.ProjectDataViewRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProjectDataView extends TableImpl<ProjectDataViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.project_data_view</code>
     */
    public static final ProjectDataView PROJECT_DATA_VIEW = new ProjectDataView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectDataViewRecord> getRecordType() {
        return ProjectDataViewRecord.class;
    }

    /**
     * The column <code>public.project_data_view.projid</code>.
     */
    public final TableField<ProjectDataViewRecord, Integer> PROJID = createField(DSL.name("projid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.project_data_view.projname</code>.
     */
    public final TableField<ProjectDataViewRecord, String> PROJNAME = createField(DSL.name("projname"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.project_data_view.projdate</code>.
     */
    public final TableField<ProjectDataViewRecord, LocalDate> PROJDATE = createField(DSL.name("projdate"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.project_data_view.id</code>.
     */
    public final TableField<ProjectDataViewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.project_data_view.firstname</code>.
     */
    public final TableField<ProjectDataViewRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>public.project_data_view.lastname</code>.
     */
    public final TableField<ProjectDataViewRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR(60), this, "");

    private ProjectDataView(Name alias, Table<ProjectDataViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProjectDataView(Name alias, Table<ProjectDataViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "project_data_view" as  SELECT b.projid,
         a.projname,
         a.projdate,
         b.id,
         b.firstname,
         b.lastname
        FROM (project a
          JOIN project_members b USING (projid));
        """), where);
    }

    /**
     * Create an aliased <code>public.project_data_view</code> table reference
     */
    public ProjectDataView(String alias) {
        this(DSL.name(alias), PROJECT_DATA_VIEW);
    }

    /**
     * Create an aliased <code>public.project_data_view</code> table reference
     */
    public ProjectDataView(Name alias) {
        this(alias, PROJECT_DATA_VIEW);
    }

    /**
     * Create a <code>public.project_data_view</code> table reference
     */
    public ProjectDataView() {
        this(DSL.name("project_data_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public ProjectDataView as(String alias) {
        return new ProjectDataView(DSL.name(alias), this);
    }

    @Override
    public ProjectDataView as(Name alias) {
        return new ProjectDataView(alias, this);
    }

    @Override
    public ProjectDataView as(Table<?> alias) {
        return new ProjectDataView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectDataView rename(String name) {
        return new ProjectDataView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectDataView rename(Name name) {
        return new ProjectDataView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectDataView rename(Table<?> name) {
        return new ProjectDataView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectDataView where(Condition condition) {
        return new ProjectDataView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectDataView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectDataView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectDataView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectDataView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectDataView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectDataView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProjectDataView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectDataView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProjectDataView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
