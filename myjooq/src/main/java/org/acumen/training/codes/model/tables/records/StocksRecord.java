/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables.records;


import org.acumen.training.codes.model.tables.Stocks;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StocksRecord extends UpdatableRecordImpl<StocksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.stocks.id</code>.
     */
    public void setId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.stocks.id</code>.
     */
    public Short getId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>public.stocks.commission</code>.
     */
    public void setCommission(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.stocks.commission</code>.
     */
    public Double getCommission() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>public.stocks.rate</code>.
     */
    public void setRate(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.stocks.rate</code>.
     */
    public Double getRate() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>public.stocks.amount</code>.
     */
    public void setAmount(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.stocks.amount</code>.
     */
    public Double getAmount() {
        return (Double) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StocksRecord
     */
    public StocksRecord() {
        super(Stocks.STOCKS);
    }

    /**
     * Create a detached, initialised StocksRecord
     */
    public StocksRecord(Short id, Double commission, Double rate, Double amount) {
        super(Stocks.STOCKS);

        setId(id);
        setCommission(commission);
        setRate(rate);
        setAmount(amount);
        resetChangedOnNotNull();
    }
}
