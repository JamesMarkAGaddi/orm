/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model;


import org.acumen.training.codes.model.tables.Administrator;
import org.acumen.training.codes.model.tables.Allowance;
import org.acumen.training.codes.model.tables.DataTypes;
import org.acumen.training.codes.model.tables.Developer;
import org.acumen.training.codes.model.tables.Insurance;
import org.acumen.training.codes.model.tables.Manager;
import org.acumen.training.codes.model.tables.Project;
import org.acumen.training.codes.model.tables.ProjectMembers;
import org.acumen.training.codes.model.tables.Stocks;
import org.acumen.training.codes.model.tables.Utility;
import org.acumen.training.codes.model.tables.records.AdministratorRecord;
import org.acumen.training.codes.model.tables.records.AllowanceRecord;
import org.acumen.training.codes.model.tables.records.DataTypesRecord;
import org.acumen.training.codes.model.tables.records.DeveloperRecord;
import org.acumen.training.codes.model.tables.records.InsuranceRecord;
import org.acumen.training.codes.model.tables.records.ManagerRecord;
import org.acumen.training.codes.model.tables.records.ProjectMembersRecord;
import org.acumen.training.codes.model.tables.records.ProjectRecord;
import org.acumen.training.codes.model.tables.records.StocksRecord;
import org.acumen.training.codes.model.tables.records.UtilityRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdministratorRecord> ADMINISTRATOR_PKEY = Internal.createUniqueKey(Administrator.ADMINISTRATOR, DSL.name("administrator_pkey"), new TableField[] { Administrator.ADMINISTRATOR.ID }, true);
    public static final UniqueKey<AllowanceRecord> ALLOWANCE_ID_KEY = Internal.createUniqueKey(Allowance.ALLOWANCE, DSL.name("allowance_id_key"), new TableField[] { Allowance.ALLOWANCE.ID }, true);
    public static final UniqueKey<AllowanceRecord> ALLOWANCE_PKEY = Internal.createUniqueKey(Allowance.ALLOWANCE, DSL.name("allowance_pkey"), new TableField[] { Allowance.ALLOWANCE.ALLOWANCEID }, true);
    public static final UniqueKey<DataTypesRecord> EMPID = Internal.createUniqueKey(DataTypes.DATA_TYPES, DSL.name("empid"), new TableField[] { DataTypes.DATA_TYPES.EMPID }, true);
    public static final UniqueKey<DeveloperRecord> DEVELOPER_EMPID_KEY = Internal.createUniqueKey(Developer.DEVELOPER, DSL.name("developer_empid_key"), new TableField[] { Developer.DEVELOPER.EMPLOYEEID }, true);
    public static final UniqueKey<DeveloperRecord> DEVELOPER_PKEY = Internal.createUniqueKey(Developer.DEVELOPER, DSL.name("developer_pkey"), new TableField[] { Developer.DEVELOPER.ID }, true);
    public static final UniqueKey<InsuranceRecord> INSURANCE_PKEY = Internal.createUniqueKey(Insurance.INSURANCE, DSL.name("insurance_pkey"), new TableField[] { Insurance.INSURANCE.POLICYID, Insurance.INSURANCE.ID }, true);
    public static final UniqueKey<ManagerRecord> MANAGER_PKEY = Internal.createUniqueKey(Manager.MANAGER, DSL.name("manager_pkey"), new TableField[] { Manager.MANAGER.ID }, true);
    public static final UniqueKey<ProjectRecord> PROJECT_PKEY = Internal.createUniqueKey(Project.PROJECT, DSL.name("project_pkey"), new TableField[] { Project.PROJECT.PROJID }, true);
    public static final UniqueKey<ProjectMembersRecord> PROJECT_MEMBERS_PKEY = Internal.createUniqueKey(ProjectMembers.PROJECT_MEMBERS, DSL.name("project_members_pkey"), new TableField[] { ProjectMembers.PROJECT_MEMBERS.ID }, true);
    public static final UniqueKey<StocksRecord> STOCKS_PKEY = Internal.createUniqueKey(Stocks.STOCKS, DSL.name("stocks_pkey"), new TableField[] { Stocks.STOCKS.ID }, true);
    public static final UniqueKey<UtilityRecord> UTILITY_PKEY = Internal.createUniqueKey(Utility.UTILITY, DSL.name("utility_pkey"), new TableField[] { Utility.UTILITY.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DeveloperRecord, ManagerRecord> DEVELOPER__DEVELOPER_DEVID_FKEY = Internal.createForeignKey(Developer.DEVELOPER, DSL.name("developer_devid_fkey"), new TableField[] { Developer.DEVELOPER.DEVID }, Keys.MANAGER_PKEY, new TableField[] { Manager.MANAGER.ID }, true);
    public static final ForeignKey<ProjectMembersRecord, ProjectRecord> PROJECT_MEMBERS__PROJECT_MEMBERS_PROJID_FKEY = Internal.createForeignKey(ProjectMembers.PROJECT_MEMBERS, DSL.name("project_members_projid_fkey"), new TableField[] { ProjectMembers.PROJECT_MEMBERS.PROJID }, Keys.PROJECT_PKEY, new TableField[] { Project.PROJECT.PROJID }, true);
}
