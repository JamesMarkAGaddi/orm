/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.acumen.training.codes.model.Keys;
import org.acumen.training.codes.model.Public;
import org.acumen.training.codes.model.tables.Manager.ManagerPath;
import org.acumen.training.codes.model.tables.records.DeveloperRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Developer extends TableImpl<DeveloperRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.developer</code>
     */
    public static final Developer DEVELOPER = new Developer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeveloperRecord> getRecordType() {
        return DeveloperRecord.class;
    }

    /**
     * The column <code>public.developer.id</code>.
     */
    public final TableField<DeveloperRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.developer.employeeid</code>.
     */
    public final TableField<DeveloperRecord, Short> EMPLOYEEID = createField(DSL.name("employeeid"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.developer.devid</code>.
     */
    public final TableField<DeveloperRecord, Integer> DEVID = createField(DSL.name("devid"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    private Developer(Name alias, Table<DeveloperRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Developer(Name alias, Table<DeveloperRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.developer</code> table reference
     */
    public Developer(String alias) {
        this(DSL.name(alias), DEVELOPER);
    }

    /**
     * Create an aliased <code>public.developer</code> table reference
     */
    public Developer(Name alias) {
        this(alias, DEVELOPER);
    }

    /**
     * Create a <code>public.developer</code> table reference
     */
    public Developer() {
        this(DSL.name("developer"), null);
    }

    public <O extends Record> Developer(Table<O> path, ForeignKey<O, DeveloperRecord> childPath, InverseForeignKey<O, DeveloperRecord> parentPath) {
        super(path, childPath, parentPath, DEVELOPER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DeveloperPath extends Developer implements Path<DeveloperRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DeveloperPath(Table<O> path, ForeignKey<O, DeveloperRecord> childPath, InverseForeignKey<O, DeveloperRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DeveloperPath(Name alias, Table<DeveloperRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DeveloperPath as(String alias) {
            return new DeveloperPath(DSL.name(alias), this);
        }

        @Override
        public DeveloperPath as(Name alias) {
            return new DeveloperPath(alias, this);
        }

        @Override
        public DeveloperPath as(Table<?> alias) {
            return new DeveloperPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DeveloperRecord, Integer> getIdentity() {
        return (Identity<DeveloperRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DeveloperRecord> getPrimaryKey() {
        return Keys.DEVELOPER_PKEY;
    }

    @Override
    public List<UniqueKey<DeveloperRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.DEVELOPER_EMPID_KEY);
    }

    @Override
    public List<ForeignKey<DeveloperRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DEVELOPER__DEVELOPER_DEVID_FKEY);
    }

    private transient ManagerPath _manager;

    /**
     * Get the implicit join path to the <code>public.manager</code> table.
     */
    public ManagerPath manager() {
        if (_manager == null)
            _manager = new ManagerPath(this, Keys.DEVELOPER__DEVELOPER_DEVID_FKEY, null);

        return _manager;
    }

    @Override
    public List<Check<DeveloperRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("devid"), "((devid >= 1))", true)
        );
    }

    @Override
    public Developer as(String alias) {
        return new Developer(DSL.name(alias), this);
    }

    @Override
    public Developer as(Name alias) {
        return new Developer(alias, this);
    }

    @Override
    public Developer as(Table<?> alias) {
        return new Developer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Developer rename(String name) {
        return new Developer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Developer rename(Name name) {
        return new Developer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Developer rename(Table<?> name) {
        return new Developer(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Developer where(Condition condition) {
        return new Developer(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Developer where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Developer where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Developer where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Developer where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Developer where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Developer where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Developer where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Developer whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Developer whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
