/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.acumen.training.codes.model.Keys;
import org.acumen.training.codes.model.Public;
import org.acumen.training.codes.model.tables.Developer.DeveloperPath;
import org.acumen.training.codes.model.tables.records.ManagerRecord;
import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Manager extends TableImpl<ManagerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.manager</code>
     */
    public static final Manager MANAGER = new Manager();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManagerRecord> getRecordType() {
        return ManagerRecord.class;
    }

    /**
     * The column <code>public.manager.id</code>.
     */
    public final TableField<ManagerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.manager.firstname</code>.
     */
    public final TableField<ManagerRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.manager.gender</code>.
     */
    public final TableField<ManagerRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field(DSL.raw("'F'::bpchar"), SQLDataType.CHAR)), this, "");

    /**
     * The column <code>public.manager.age</code>.
     */
    public final TableField<ManagerRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.manager.salary</code>.
     */
    public final TableField<ManagerRecord, Double> SALARY = createField(DSL.name("salary"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.manager.birthday</code>.
     */
    public final TableField<ManagerRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.manager.supervisor</code>.
     */
    public final TableField<ManagerRecord, Integer> SUPERVISOR = createField(DSL.name("supervisor"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("102"), SQLDataType.INTEGER)), this, "");

    private Manager(Name alias, Table<ManagerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Manager(Name alias, Table<ManagerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.manager</code> table reference
     */
    public Manager(String alias) {
        this(DSL.name(alias), MANAGER);
    }

    /**
     * Create an aliased <code>public.manager</code> table reference
     */
    public Manager(Name alias) {
        this(alias, MANAGER);
    }

    /**
     * Create a <code>public.manager</code> table reference
     */
    public Manager() {
        this(DSL.name("manager"), null);
    }

    public <O extends Record> Manager(Table<O> path, ForeignKey<O, ManagerRecord> childPath, InverseForeignKey<O, ManagerRecord> parentPath) {
        super(path, childPath, parentPath, MANAGER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ManagerPath extends Manager implements Path<ManagerRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ManagerPath(Table<O> path, ForeignKey<O, ManagerRecord> childPath, InverseForeignKey<O, ManagerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ManagerPath(Name alias, Table<ManagerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ManagerPath as(String alias) {
            return new ManagerPath(DSL.name(alias), this);
        }

        @Override
        public ManagerPath as(Name alias) {
            return new ManagerPath(alias, this);
        }

        @Override
        public ManagerPath as(Table<?> alias) {
            return new ManagerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ManagerRecord, Integer> getIdentity() {
        return (Identity<ManagerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ManagerRecord> getPrimaryKey() {
        return Keys.MANAGER_PKEY;
    }

    private transient DeveloperPath _developer;

    /**
     * Get the implicit to-many join path to the <code>public.developer</code>
     * table
     */
    public DeveloperPath developer() {
        if (_developer == null)
            _developer = new DeveloperPath(this, null, Keys.DEVELOPER__DEVELOPER_DEVID_FKEY.getInverseKey());

        return _developer;
    }

    @Override
    public List<Check<ManagerRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("manager_age_check"), "((age >= 0))", true),
            Internal.createCheck(this, DSL.name("manager_birthday_check"), "((birthday >= '1920-01-01'::date))", true)
        );
    }

    @Override
    public Manager as(String alias) {
        return new Manager(DSL.name(alias), this);
    }

    @Override
    public Manager as(Name alias) {
        return new Manager(alias, this);
    }

    @Override
    public Manager as(Table<?> alias) {
        return new Manager(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Manager rename(String name) {
        return new Manager(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Manager rename(Name name) {
        return new Manager(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Manager rename(Table<?> name) {
        return new Manager(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manager where(Condition condition) {
        return new Manager(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manager where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manager where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manager where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manager where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manager where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manager where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manager where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manager whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manager whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
