/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables;


import java.util.Collection;

import org.acumen.training.codes.model.Keys;
import org.acumen.training.codes.model.Public;
import org.acumen.training.codes.model.tables.records.StocksRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Stocks extends TableImpl<StocksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.stocks</code>
     */
    public static final Stocks STOCKS = new Stocks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StocksRecord> getRecordType() {
        return StocksRecord.class;
    }

    /**
     * The column <code>public.stocks.id</code>.
     */
    public final TableField<StocksRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.stocks.commission</code>.
     */
    public final TableField<StocksRecord, Double> COMMISSION = createField(DSL.name("commission"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.stocks.rate</code>.
     */
    public final TableField<StocksRecord, Double> RATE = createField(DSL.name("rate"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.stocks.amount</code>.
     */
    public final TableField<StocksRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field(DSL.raw("1.0"), SQLDataType.DOUBLE)), this, "");

    private Stocks(Name alias, Table<StocksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Stocks(Name alias, Table<StocksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.stocks</code> table reference
     */
    public Stocks(String alias) {
        this(DSL.name(alias), STOCKS);
    }

    /**
     * Create an aliased <code>public.stocks</code> table reference
     */
    public Stocks(Name alias) {
        this(alias, STOCKS);
    }

    /**
     * Create a <code>public.stocks</code> table reference
     */
    public Stocks() {
        this(DSL.name("stocks"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<StocksRecord> getPrimaryKey() {
        return Keys.STOCKS_PKEY;
    }

    @Override
    public Stocks as(String alias) {
        return new Stocks(DSL.name(alias), this);
    }

    @Override
    public Stocks as(Name alias) {
        return new Stocks(alias, this);
    }

    @Override
    public Stocks as(Table<?> alias) {
        return new Stocks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stocks rename(String name) {
        return new Stocks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stocks rename(Name name) {
        return new Stocks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stocks rename(Table<?> name) {
        return new Stocks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Stocks where(Condition condition) {
        return new Stocks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Stocks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Stocks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Stocks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Stocks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Stocks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Stocks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Stocks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Stocks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Stocks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
