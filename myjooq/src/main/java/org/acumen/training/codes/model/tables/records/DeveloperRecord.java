/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables.records;


import org.acumen.training.codes.model.tables.Developer;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DeveloperRecord extends UpdatableRecordImpl<DeveloperRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.developer.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.developer.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.developer.employeeid</code>.
     */
    public void setEmployeeid(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.developer.employeeid</code>.
     */
    public Short getEmployeeid() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>public.developer.devid</code>.
     */
    public void setDevid(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.developer.devid</code>.
     */
    public Integer getDevid() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DeveloperRecord
     */
    public DeveloperRecord() {
        super(Developer.DEVELOPER);
    }

    /**
     * Create a detached, initialised DeveloperRecord
     */
    public DeveloperRecord(Integer id, Short employeeid, Integer devid) {
        super(Developer.DEVELOPER);

        setId(id);
        setEmployeeid(employeeid);
        setDevid(devid);
        resetChangedOnNotNull();
    }
}
