/*
 * This file is generated by jOOQ.
 */
package org.acumen.training.codes.model.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.acumen.training.codes.model.Keys;
import org.acumen.training.codes.model.Public;
import org.acumen.training.codes.model.tables.records.DataTypesRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DataTypes extends TableImpl<DataTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.data_types</code>
     */
    public static final DataTypes DATA_TYPES = new DataTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataTypesRecord> getRecordType() {
        return DataTypesRecord.class;
    }

    /**
     * The column <code>public.data_types.age</code>.
     */
    public final TableField<DataTypesRecord, Short> AGE = createField(DSL.name("age"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.data_types.empid</code>.
     */
    public final TableField<DataTypesRecord, Integer> EMPID = createField(DSL.name("empid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.data_types.popsize</code>.
     */
    public final TableField<DataTypesRecord, Long> POPSIZE = createField(DSL.name("popsize"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.data_types.salary</code>.
     */
    public final TableField<DataTypesRecord, Double> SALARY = createField(DSL.name("salary"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.data_types.account_amount</code>.
     */
    public final TableField<DataTypesRecord, Float> ACCOUNT_AMOUNT = createField(DSL.name("account_amount"), SQLDataType.REAL, this, "");

    /**
     * The column <code>public.data_types.donation</code>.
     */
    public final TableField<DataTypesRecord, BigDecimal> DONATION = createField(DSL.name("donation"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.data_types.mortage</code>.
     */
    public final TableField<DataTypesRecord, BigDecimal> MORTAGE = createField(DSL.name("mortage"), SQLDataType.NUMERIC(10, 3).nullable(false), this, "");

    /**
     * The column <code>public.data_types.nickname</code>.
     */
    public final TableField<DataTypesRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.data_types.position</code>.
     */
    public final TableField<DataTypesRecord, String> POSITION = createField(DSL.name("position"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.data_types.comment</code>.
     */
    public final TableField<DataTypesRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.data_types.isemployed</code>.
     */
    public final TableField<DataTypesRecord, Boolean> ISEMPLOYED = createField(DSL.name("isemployed"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.data_types.timein</code>.
     */
    public final TableField<DataTypesRecord, LocalTime> TIMEIN = createField(DSL.name("timein"), SQLDataType.LOCALTIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_types.birthday</code>.
     */
    public final TableField<DataTypesRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.data_types.dateresigned</code>.
     */
    public final TableField<DataTypesRecord, LocalDateTime> DATERESIGNED = createField(DSL.name("dateresigned"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.data_types.moneytxdate</code>.
     */
    public final TableField<DataTypesRecord, OffsetDateTime> MONEYTXDATE = createField(DSL.name("moneytxdate"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.data_types.id</code>.
     */
    public final TableField<DataTypesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<DataTypesRecord, Object> AMOUNT = createField(DSL.name("amount"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"money\"").nullable(false), this, "");

    /**
     * The column <code>public.data_types.isturnoff</code>.
     */
    public final TableField<DataTypesRecord, String> ISTURNOFF = createField(DSL.name("isturnoff"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.data_types.picture</code>.
     */
    public final TableField<DataTypesRecord, byte[]> PICTURE = createField(DSL.name("picture"), SQLDataType.BLOB.nullable(false), this, "");

    private DataTypes(Name alias, Table<DataTypesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DataTypes(Name alias, Table<DataTypesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.data_types</code> table reference
     */
    public DataTypes(String alias) {
        this(DSL.name(alias), DATA_TYPES);
    }

    /**
     * Create an aliased <code>public.data_types</code> table reference
     */
    public DataTypes(Name alias) {
        this(alias, DATA_TYPES);
    }

    /**
     * Create a <code>public.data_types</code> table reference
     */
    public DataTypes() {
        this(DSL.name("data_types"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DataTypesRecord, Integer> getIdentity() {
        return (Identity<DataTypesRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<UniqueKey<DataTypesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EMPID);
    }

    @Override
    public DataTypes as(String alias) {
        return new DataTypes(DSL.name(alias), this);
    }

    @Override
    public DataTypes as(Name alias) {
        return new DataTypes(alias, this);
    }

    @Override
    public DataTypes as(Table<?> alias) {
        return new DataTypes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataTypes rename(String name) {
        return new DataTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataTypes rename(Name name) {
        return new DataTypes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataTypes rename(Table<?> name) {
        return new DataTypes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DataTypes where(Condition condition) {
        return new DataTypes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DataTypes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DataTypes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DataTypes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DataTypes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DataTypes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DataTypes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DataTypes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DataTypes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DataTypes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
